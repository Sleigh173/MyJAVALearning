package cn.sxt.codedance;

//[编程题]雀魂启动！
//时间限制：C/C++ 1秒，其他语言2秒
//空间限制：C/C++ 32M，其他语言64M
//小包最近迷上了一款叫做雀魂的麻将游戏，但是这个游戏规则太复杂，小包玩了几个月了还是输多赢少。
//于是生气的小包根据游戏简化了一下规则发明了一种新的麻将，只留下一种花色，并且去除了一些特殊和牌方式（例如七对子等），具体的规则如下：
//总共有36张牌，每张牌是1~9。每个数字4张牌。
//你手里有其中的14张牌，如果这14张牌满足如下条件，即算作和牌
//14张牌中有2张相同数字的牌，称为雀头。
//除去上述2张牌，剩下12张牌可以组成4个顺子或刻子。顺子的意思是递增的连续3个数字牌（例如234,567等），刻子的意思是相同数字的3个数字牌（例如111,777）
//例如：
//1 1 1 2 2 2 6 6 6 7 7 7 9 9 可以组成1,2,6,7的4个刻子和9的雀头，可以和牌
//1 1 1 1 2 2 3 3 5 6 7 7 8 9 用1做雀头，组123,123,567,789的四个顺子，可以和牌
//1 1 1 2 2 2 3 3 3 5 6 7 7 9 无论用1 2 3 7哪个做雀头，都无法组成和牌的条件。
//现在，小包从36张牌中抽取了13张牌，他想知道在剩下的23张牌中，再取一张牌，取到哪几种数字牌可以和牌。
//输入描述:
//输入只有一行，包含13个数字，用空格分隔，每个数字在1~9之间，数据保证同种数字最多出现4次。
//输出描述:
//输出同样是一行，包含1个或以上的数字。代表他再取到哪些牌可以和牌。若满足条件的有多种牌，请按从小到大的顺序输出。若没有满足条件的牌，请输出一个数字0
//输入例子1:
//1 1 1 2 2 2 5 5 5 6 6 6 9
//输出例子1:
//9
//例子说明1:
//可以组成1,2,6,7的4个刻子和9的雀头
//输入例子2:
//1 1 1 1 2 2 3 3 5 6 7 8 9
//输出例子2:
//4 7
//例子说明2:
//用1做雀头，组123,123,567或456,789的四个顺子
//输入例子3:
//1 1 1 2 2 2 3 3 3 5 7 7 9
//输出例子3:
//0
//例子说明3:
//来任何牌都无法和牌
import java.util.*;

public class QueHun {
 
    private void sln() {
    	//输入13张牌
        Scanner sc = new Scanner(System.in);
        int[] state = new int[9], helpArr = new int[9];//state存储1-9的数字出现的次数，helpArr辅助数组
        ArrayList<Integer> res = new ArrayList<>();//存储可以和的牌
        for (int i = 0; i < 13; i++) {
            int num = sc.nextInt();//存储牌面
            state[num - 1]++;//存储牌面及相应的张数
        }
        sc.close();
        
        //加入一张新牌
        for (int i = 0; i < 9; i++) {
            if (state[i] < 4) {//某张牌不能大于四张，大于四张不做任何处理，输出0
                int num = i + 1;//实际牌面总是比索引大1，因为索引从0开始
                System.arraycopy(state, 0, helpArr, 0, 9);//存到helpArr中处理
                helpArr[i]++;//处理牌面为num的牌加入之后所以数组i处的值要加1，这样就是14张牌了
                if (canHu(helpArr, 14, false)) res.add(num);//如果14张牌能胡，就把num添加到结果数列中
            }
        }
        
        //打印结果
        if (res.isEmpty()) System.out.println(0);//res为空说明，没有和牌或者没有经过处理
        else {//如果不是空的说明找到了能和的牌，按格式打印出来
            StringBuffer sbf = new StringBuffer();
            sbf.append(res.get(0));//打出第一个
            for (int i = 1; i < res.size(); i++) {
                sbf.append(" ");//打出空格
                sbf.append(res.get(i));//打出后续
            }
            System.out.println(sbf.toString());//打印
        }
    }
 
    //能否和牌
    /**
     * 
     * @param arr 需要检查的数组
     * @param total 一共有多少张牌
     * @param hasHead 是否有雀头
     * @return 能和牌返回true不能和牌返回false
     */
    private boolean canHu(int[] arr, int total, boolean hasHead) {
        if (total == 0) return true;//终止递归的条件，判断完所有牌都能和就返回true
        if (!hasHead) {//如果没有雀头
            for (int i = 0; i < 9; i++) {
                if (arr[i] >= 2) {//大于两张的都有可能是雀头
                    arr[i] -= 2;//把雀头去除
                    if (canHu(arr, total - 2, true)) return true;//判断去除雀头后能和牌否，能返回true
                    arr[i] += 2;//回溯的时候恢复arr
                }
            }
            return false;
        } else {
            for (int i = 0; i < 9; i++) {//循环处理9种牌
                if (arr[i] > 0) {//有i+1牌面的牌
                    if (arr[i] >= 3) {//i+1牌面的牌个数多于三张
                        arr[i] -= 3;//把这三张取出
                        if (canHu(arr, total - 3, true)) return true;//判断剩下的是否和牌，能返回true
                        arr[i] += 3;//回溯恢复
                    }
                    if (i + 2 < 9 && arr[i + 1] > 0 && arr[i + 2] > 0) {//有没有顺子
                        arr[i]--;//顺子每张取出1张
                        arr[i + 1]--;
                        arr[i + 2]--;
                        if (canHu(arr, total - 3, true)) return true;//判断剩下的是否和牌，能返回true
                        arr[i]++;//回溯恢复
                        arr[i + 1]++;
                        arr[i + 2]++;
                    }
                }
            }
        }
        return false;
    }
 
    public static void main(String[] args) {
        new QueHun().sln();
    }
}
