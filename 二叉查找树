package Tree;

public class BinarySearchTree {
	private static class BinaryNode{
		BinaryNode(String theElement){
			this(theElement, null, null);
		}
		BinaryNode(String theElement, BinaryNode lt, BinaryNode rt){
			element = theElement;
			left = lt;
			right = rt;
		}
		String element;
		BinaryNode left;
		BinaryNode right;
	}
		
	private BinaryNode root;

	public BinarySearchTree() {
		root = null;
	}
	
	public boolean isEmpty() {
		return root == null;
	}
	
	public void makeEmpty() {
		root = null;
	}
	
	//contains方法
	public boolean contains(String x) {
		return contains(x, root);
	}
	
	private boolean contains(String x, BinaryNode root) {
		if(root == null) {
			return false;
		}
		
		int compareResult = x.compareTo(root.element);
		
		if(compareResult < 0) {
			return contains(x, root.left);
		}else if(compareResult > 0) {
			return contains(x, root.right);
		}else {
			return true;
		}	
	}
	
	//findMin方法，递归
	private BinaryNode findMin(BinaryNode t) {
		if(t == null) {
			return null;
		}else if(t.left == null) {
			return t;
		}
		return findMin(t.left);
	}
	
	//findMax方法，非递归
	private BinaryNode findMax(BinaryNode t) {
		if(t != null) {
			while(t.right != null) {
				t = t.right;
			}
		}
		return t;
	}
	
	/**
	 * Internal method to insert into a subtree
	 * @param x the item to insert
	 * @param t the node that roots the subtree
	 * @return the new root of the subtree
	 */
	BinaryNode insert(String x, BinaryNode t) {
		if(t == null) {
			return new BinaryNode(x, null, null);
		}
		
		int compareResult = x.compareTo(t.element);
		
		if(compareResult < 0) {
			t.left = insert(x, t.left);
		}else if(compareResult > 0) {
			t.right = insert(x, t.right);
		}else {

		}
		return t;
	}
	
	/**
	 * Internal method to remove from a subtree
	 * @param x the item to remove
	 * @param t the node that roots the subtree
	 * @return the new root of the subtree
	 */
	private BinaryNode remove(String x, BinaryNode t) {
		if(t == null) {
			return t;	//Item not found; do nothing
		}
		
		int compareResult = x.compareTo(t.element);
		
		if(compareResult < 0) {
			t.left = remove(x, t.left);
		}else if(compareResult > 0) {
			t.right = remove(x, t.right);
		}else if(t.left != null && t.right != null) {	//Two children
			t.element = findMin(t.right).element;
			t.right = remove(t.element, t.right);
		}else {
			t = (t.left != null)?t.left:t.right;
		}
		return t;
	}
	
	public void printTree() {
		if(isEmpty()) {
			System.out.println("Empty Tree");
		}else {
			printTree(root);
		}
	}
	
	private void printTree(BinaryNode t) {
		if(t != null) {
			printTree(t.left);
			System.out.println(t.element);
			printTree(t.right);
		}
	}
}
