import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

public class MergeSort {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
    //int[] arr = {8, 4, 5, 7, 1, 3, 6, 2};
    
		int[] arr = new int[10000000];//测试一千万的数据
		for(int i = 0; i < arr.length; i++) {
			arr[i] = (int) (Math.random() * 1000000000);//[0,1000000000)的随机数
		}
		int[] temp = new int[arr.length];//归并排序需要额外空间
		
    //记录归并排序前的时间
		Date date1 = new Date();
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
		String date1str = simpleDateFormat.format(date1);
		System.out.println(date1str);
		
    //排序
		mergeSort(arr, 0, arr.length - 1, temp);
		
    //记录排序后的时间
		Date date2 = new Date();
		String date2str = simpleDateFormat.format(date2);
		System.out.println(date2str);//一千万数据两秒的水平 
		
		//System.out.println("归并排序后：" + Arrays.toString(arr));
	}
	
	//分+合方法
	public static void mergeSort(int[] arr, int left, int right, int[] temp) {
		if(left < right) {
			int mid = (left + right) / 2;//中间索引
			//向左递归进行分解
			mergeSort(arr, left, mid, temp);
			//向右递归进行分解
			mergeSort(arr, mid + 1, right, temp);
			//合并
			merge(arr, left, mid, right, temp);
		}
	}

	//合的方法
	/**
	 * 
	 * @param arr	待排序的原始数组
	 * @param left	左边序列的初始索引
	 * @param right	右边序列的最后索引
	 * @param mid	中间索引
	 * @param temp	做中转的数组
	 */
	public static void merge(int[] arr, int left, int mid, int right, int[] temp) {
		
		int i = left;//初始化i，左边有序数列的初始索引
		int j = mid + 1;//右边有序数列的指针
		int t = 0;//temp的指针
		
		//先把左右两边（有序）的数据按照规则填充到temp里面去
		//直到两边的有序序列，有一边处理完毕为止
		while(i <= mid && j <= right) {
			//如果左边的当前元素小于等于右边的当前元素
			//将左边的当前元素拷贝到temp数组中
			//然后t后移，i后移
			if(arr[i] <= arr[j]) {
				temp[t] = arr[i];
				t += 1;
				i += 1;
			}else {//右边的当前元素小于左边的当前元素
				temp[t] = arr[j];
				t += 1;
				j += 1;
			}
		}
		//把有剩余数据的一边的数据依次全部填充到temp中去
		while(i <= mid) {//左边还有剩余
			temp[t] = arr[i];
			t += 1;
			i += 1;
		}
		while(j <= right) {
			temp[t] = arr[j];
			t += 1;
			j += 1;
		}
		//将temp数组的元素拷贝到arr
		//注意并不是每次都拷贝8个
		t = 0;
		int templeft = left;//
		while(templeft <= right) {//第一次合并时templeft = 0， right = 1；
			arr[templeft] = temp[t];
			t += 1;
			templeft += 1;
		}
		//System.out.println(Arrays.toString(arr));
	}
}
