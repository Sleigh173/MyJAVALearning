public class MiGong {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//设置边界
		int[][] map = new int[8][7];
		for (int i = 0; i < map[0].length; i++) {
			map[0][i] = 1;
			map[7][i] = 1;
		}
		for (int i = 0; i < map.length; i++) {
			map[i][0] = 1;
			map[i][6] = 1;
		}
		//设置挡板
		map[3][1] = 1;
		map[3][2] = 1;
		//输出迷宫
		System.out.println("--------------");
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[0].length; j++) {
				System.out.print(map[i][j] + " ");
			}
			System.out.println();
		}
		//使用递归回溯给小球找路
		setWay2(map, 1, 1);
		//输出新的地图，就是小球的轨迹
		System.out.println("---------------");
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[0].length; j++) {
				System.out.print(map[i][j] + " ");
			}
			System.out.println();
		}
	}
	
	//使用递归回溯来给小球找路
	
	/**
	 * 约定：	如果小球能到map[6][5]，说明能够出去
	 * 			当map[i][j] = 0时，表示该点没有走过，
	 * 			当map[i][j] = 1时，表示墙不可走
	 * 			当map[i][j] = 2时，表示可以走
	 * 			当map[i][j] = 3时，表示走过但不通
	 * 策略：	行走顺序为	下->右->上->左,如果走不通再回溯
	 * @param map	表示地图
	 * @param i		出发点横坐标
	 * @param j		出发点纵坐标
	 * @return		是否走的出去
	 */
	public static boolean setWay(int[][] map, int i, int j) {
		if(map[6][5] == 2) {
			return true;
		}else {
			if(map[i][j] == 0) {//如果当前点没有走过
				//按照策略走
				map[i][j] = 2;//假定走得通
				if(setWay(map, i + 1, j)) {//下
					return true;
				}else if(setWay(map, i, j + 1)){//右
					return true;
				}else if(setWay(map, i - 1, j)) {//上
					return true;
				}else if(setWay(map, i, j -1)){//左
					return true;
				}else {
					//说明该点走不通
					map[i][j] = 3;//其实走不通
					return false;
				}
			}else {//如果不等于0，map[i][j]可能是123
				return false;
			}
		}
	}
	//修改策略
	public static boolean setWay2(int[][] map, int i, int j) {
		if(map[6][5] == 2) {
			return true;
		}else {
			if(map[i][j] == 0) {//如果当前点没有走过
				//按照策略走
				map[i][j] = 2;//假定走得通
				if(setWay(map, i - 1, j)) {//上
					return true;
				}else if(setWay2(map, i, j + 1)){//右
					return true;
				}else if(setWay2(map, i + 1, j)) {//下
					return true;
				}else if(setWay2(map, i, j -1)){//左
					return true;
				}else {
					//说明该点走不通
					map[i][j] = 3;//其实走不通
					return false;
				}
			}else {//如果不等于0，map[i][j]可能是123
				return false;
			}
		}
	}
}
